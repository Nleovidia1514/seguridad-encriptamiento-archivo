{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","key","setKey","srvResponse","setSrvResponse","fileEl","useRef","useEffect","fetch","then","res","text","data","className","type","ref","onClick","reader","FileReader","onload","event","encrypt","JSEncrypt","setPublicKey","encrypted","target","result","setTimeout","fd","FormData","append","method","body","catch","err","readAsText","current","files","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,oICyD5BC,MApDf,WAAgB,IAAD,EACSC,mBAAS,IADlB,mBACNC,EADM,KACDC,EADC,OAEyBF,mBAAS,MAFlC,mBAENG,EAFM,KAEOC,EAFP,KAIPC,EAASC,mBAuCf,OAVAC,qBAAU,WACRC,MAAM,qBACHC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJV,EAAOU,QAEV,IAGD,yBAAKC,UAAU,OACb,2BAAOC,KAAK,OAAOC,IAAKV,IACxB,4BAAQW,QAxCO,WACjB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAUC,GACxB,IAAIC,EAAU,IAAIC,YAClBD,EAAQE,aAAatB,GACrB,IAAIuB,EAAYH,EAAQA,QAAQD,EAAMK,OAAOC,QACxCF,GAILpB,EAAe,gCAAkCoB,GAEjDG,YAAW,WACT,IAAIC,EAAK,IAAIC,SACbD,EAAGE,OAAO,gBAAiBN,GAC3BhB,MAAM,WAAY,CAChBuB,OAAQ,OACRC,KAAMJ,IAELnB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIR,EAAe,+BAAiCQ,MAC7DqB,OAAM,SAAAC,GAAG,OAAI9B,EAAe,yBAA2B8B,QACzD,MAfD9B,EAAe,oHAiBnBa,EAAOkB,WAAW9B,EAAO+B,QAAQC,MAAM,MAgBrC,qBACClC,EAAc,4BAAKA,GAAoB,OCxC1BmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d42227c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { JSEncrypt } from 'js-encrypt';\n\nfunction App() {\n  const [key, setKey] = useState('');\n  const [srvResponse, setSrvResponse] = useState(null);\n\n  const fileEl = useRef();\n\n  const uploadFile = () => {\n    const reader = new FileReader();\n    reader.onload = function (event) {\n      var encrypt = new JSEncrypt();\n      encrypt.setPublicKey(key);\n      var encrypted = encrypt.encrypt(event.target.result);\n      if (!encrypted) {\n        setSrvResponse('Ha ocurrido un error, tal vez la informacion del archivo sea demasiada grande para el algoritmo de encriptacion')\n        return;\n      }\n      setSrvResponse('Lo que se envia al servidor: ' + encrypted);\n\n      setTimeout(() => {\n        var fd = new FormData();\n        fd.append('encryptedFile', encrypted);\n        fetch('/Decrypt', {\n          method: 'POST',\n          body: fd,\n        })\n          .then(res => res.text())\n          .then(data => setSrvResponse('Lo que el servidor decifra: ' + data))\n          .catch(err => setSrvResponse('Ha ocurrido un error: ' + err));\n      }, 2000);\n    };\n    reader.readAsText(fileEl.current.files[0]);\n  };\n\n  useEffect(() => {\n    fetch('/assets/publicKey')\n      .then(res => {\n        return res.text();\n      })\n      .then(data => {\n        setKey(data);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <input type=\"file\" ref={fileEl} />\n      <button onClick={uploadFile}>ENCRIPTAR Y SUBIR</button>\n      {srvResponse ? <h1>{srvResponse}</h1> : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}